.. _tree_compare:

.. index:: tree_compare.py

*tree_compare.py* -- Compare jackknifed/bootstrapped trees
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Description:**

Compares jackknifed/bootstrapped trees (support trees) with a master tree constructed typically from the entire dataset (e.g: a resulting file from `upgma_cluster.py <./upgma_cluster.html>`_) and outputs support for nodes.

if support trees do not have all tips that master has (e.g. because samples with few sequences were dropped during a jackknifing analysis), the output master tree will have only those tips included in all support trees

if support trees have tips that the master tree does not, those tips will be ignored (removed from the support tree during analysis)


**Usage:** :file:`tree_compare.py [options]`

**Input Arguments:**

.. note::

	
	**[REQUIRED]**
		
	-m, `-`-master_tree
		Master tree filepath
	-s, `-`-support_dir
		Path to dir containing support trees
	-o, `-`-output_dir
		Output directory, writes three files here makes dir if it doesn't exist


**Output:**

The result of `tree_compare.py <./tree_compare.html>`_ contains the master tree, now with internal nodes uniquely named, a separate bootstrap/jackknife support file, listing the support for each internal node, and a jackknife_named_nodes.tre tree, where internal nodes are named with their support values from 0 to 1.0, for use with tree visualization software (e.g. FigTree).


**Example:**

Given the sample upgma tree generated by the user for the entire dataset, the directory of bootstrap/jackknife supported trees (e.g.: the resulting directory from `upgma_cluster.py <./upgma_cluster.html>`_) and the directory to write the results for the tree comparisons, the following command compares the support trees with the master:

::

	tree_compare.py -m input_master_tree.tre -s bootstrapped_trees/ -o output/


