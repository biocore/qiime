#!/usr/bin/env python

__author__ = "Rob Knight and Micah Hamady"
__copyright__ = "Copyright 2011, The QIIME Project"
__credits__ =  ["Rob Knight", "Micah Hamady", "Greg Caporaso",
                "Kyle Bittinger", "Jesse Stombaugh","William Walters",
                "Jens Reeder", "Jose Antonio Navas Molina",
                "Jai Ram Rideout"] #remember to add yourself
__license__ = "GPL"
__version__ = "1.7.0-dev"
__maintainer__ = "William Walters"
__email__ = "william.a.walters@colorado.edu"
__status__ = "Development"

from qiime.util import (parse_command_line_parameters, get_options_lookup,
 make_option, create_dir)
from qiime.quality_filter_fasta import quality_filter_sequences

options_lookup = get_options_lookup()

script_info={}
script_info['brief_description']="""Quality filter fasta sequences"""
script_info['script_description']="""This script is designed to quality filter\
 demultplexed data, although fasta files that are not in QIIME-compatible\
 format can be processed. The filters include: primer\
 mismatch, sequence length, ambiguous bases, homopolymer, average quality \
 score, quality score window, and reverse primer removal.\
"""
script_info['script_usage']=[]
script_info['script_usage'].append(("""Standard Example:""",
"""Using a single 454 run, which contains a single FASTA, QUAL, and mapping\
 file while using default parameters and outputting the data into the Directory\
 "quality_filtered_output":""",
"""%prog -m Mapping_File.txt -f 1.TCA.454Reads.fna -q 1.TCA.454Reads.qual\
 -o quality_filtered_output/"""))
script_info['script_usage'].append(("""Multiple FASTA and QUAL Files Example:""",
"""For the case where there are multiple FASTA and QUAL files, the user can run\
 the following comma-separated command as long as there are not duplicate\
 barcodes listed in the mapping file:""",
"""%prog -m Mapping_File.txt -f 1.TCA.454Reads.fna,2.TCA.454Reads.fna\
 -q 1.TCA.454Reads.qual,2.TCA.454Reads.qual\
 -o quality_filtered_output_comma_separated/"""))
script_info['script_usage'].append(("""Reverse Primer Example:""",
"""Using a single 454 run, which contains a single FASTA, QUAL, and mapping\
 file while detecting and truncating reverse primers":""",
"""%prog -m Mapping_File.txt -f 1.TCA.454Reads.fna -q 1.TCA.454Reads.qual\
 -o reverse_primer_removal_output/ -z truncate_only"""))
script_info['script_usage'].append(("""Fasta labels not in QIIME format""",
"""Use a single FASTA, QUAL, and mapping file while using default parameters\
 and disabling the SampleID match for primers (and reverse primers):""",
"""%prog -m Mapping_File.txt -f 1.TCA.454Reads.fna -q 1.TCA.454Reads.qual\
 -o suppress_sampleid_output/ -z truncate_only --suppress_sampleid_check"""))



script_info['output_description']="""Three files are generated by %prog:

1. .fna file (e.g. seqs.fna) - This is a FASTA file containing all sequences\
 which meet the user-defined parameters.
2. histograms.txt- This contains the counts of sequences with a particular\
 length, pre- and post-processing
3. quality_filter_log.txt - This file contains a summary of the %prog analysis.\
 Specifically, this file includes information regarding the number of sequences\
 that pass quality control (number of seqs written) and the number of sequences\
 discarded for each quality filter.
4. (optional) seqs.qual - This is a qual file with matching base positions to\
 the processed fna file. This will be written if the -d option is used.
5. (optional) detailed_quality_log.txt - This file contains a per-sequence\
 list of all failures for every quality check. Enable this with the\
 --enable_all_checks parameter.
"""
script_info['required_options']=[\
    make_option('-m', '--map', dest='map_fname', type='existing_filepath',
                help='name of mapping file. NOTE: Must contain a header'
                    ' line indicating SampleID in the first column and'
                    ' BarcodeSequence in the second,'
                    ' LinkerPrimerSequence in the third.'),
    make_option('-f', '--fasta', dest='fasta_fnames', type='existing_filepaths',
                help='names of fasta files, comma-delimited')]
                
script_info['optional_options']=[

    make_option('-q', '--qual', dest='qual_fnames', type='existing_filepaths',
        help='names of qual files, comma-delimited [default: %default]'),

    make_option('-l', '--min_seq_length', type='int', default=200,
        help='minimum sequence length, in nucleotides for the processed '
         '(primer removed) sequence. If the sliding window truncation option '
         '(-w), reverse primer (-z), or ambiguous bases truncation (-x) are '
         'used, the length of the truncated sequence will be checked to '
         'ensure it is greater than or equal to the minimum length specified '
         'here. [default: %default]'),

    make_option('-L', '--max_seq_length', type='int', default=1000,
        help='maximum sequence length, in nucleotides [default: %default]'),

    make_option('-s', '--min_qual_score', type='int', default=25,
        help='min average qual score allowed in read [default: %default]'),

    make_option('-k', '--retain_primer', action='store_true',
        help='do not remove forward primer from output sequences. '
        '[default: %default]', default=False),

    make_option('-a', '--max_ambig', type='int', default=6,
        help='maximum number of ambiguous bases [default: %default]'),
        
    make_option('--suppress_ambig_check', default=False, action='store_true',
        help='Enable to suppress ambiguous base check. [default: %default]'),

    make_option('-H', '--max_homopolymer', type='int', default=6,
        help='maximum length of homopolymer run [default: %default]'),
    
    make_option('--suppress_homopolymer_check', default=False, 
        action='store_true', help='Enable to suppress homopolymer check. '
        '[default: %default]'),

    make_option('-M', '--max_primer_mismatch', type='int', default=0,
        help='maximum number of primer mismatches [default: %default]'),
        
    make_option('--local_align_forward_primer', default=False,
        action='store_true', help='Enable to search for forward primer by '
        'local alignment, rather than assuming the initial bases of the read '
        'are the forward primer. Will be much slower than the default method. '
        'Bases that occur before the forward primer will be trimmed out of the '
        'final read. [default: %default]'),

    make_option('-o', '--output_dir', default='.', type='new_dirpath',
        help='directory prefix for output files [default: %default]'),

    make_option('-w', '--qual_score_window', type='int', default=0,
        action='store', help='Enable sliding window test of quality '
        'scores.  If the average score of a continuous set of w nucleotides '
        'falls below the threshold (see -s for default), the sequence is '
        'discarded. A good value would be 50. 0 (zero) means no filtering. '
        'Must pass a .qual file (see -q parameter) if this '
        'functionality is enabled.  Default behavior for this function '
        'is to truncate the sequence at the beginning of the poor quality '
        'window, and test for minimal length (-l parameter) of the resulting '
        'sequence. [default: %default]'),
        
    make_option('-g', '--discard_bad_windows', default=False,
        action='store_true', help='If the qual_score_window option (-w) is '
        'enabled, this will override the default truncation behavior and '
        'discard any sequences where a bad window is found. '
        ' [default: %default]'),
        
    make_option('-p', '--suppress_primer_check', default=False,
        action='store_true', help='Disable forward primer mismatch test '
        'and primer removal. [default: %default]'),
        
    make_option('-z', '--reverse_primers', default="disable", type='choice', 
        choices = ['disable', 'truncate_only', 'truncate_remove'],
        action='store', help='Enable removal of the reverse primer and '
        'any subsequence sequence from the end of each read.  To enable '
        'this, there has to be a "ReversePrimer" column in the mapping file. '
        "Primers a required to be in IUPAC format and written in the 5' to "
        " 3' direction.  Valid options are 'disable', 'truncate_only', "
        "and 'truncate_remove'.  'truncate_only' will remove the primer "
        "and subsequent sequence data from the output read and will not "
        "alter output of sequences where the primer cannot be found. "
        "'truncate_remove' will flag sequences where the primer cannot "
        "be found to not be written and will record the quantity of such "
        "failed sequences in the log file. [default: %default]"),
        
    make_option('--reverse_primer_mismatches', default=0, type='int',
        action='store', help='Set number of allowed mismatches for '
        'reverse primers (option -z). [default: %default]'),
        
    make_option('-d', '--record_qual_scores', default=False,
        action='store_true', help='Enables recording of quality scores for '
        'all sequences that are written.  If this option is enabled, a file '
        'named seqs_filtered.qual will be created in the output directory, '
        'and will contain the same sequence IDs in the seqs.fna file and '
        'sequence quality scores matching the bases present in the seqs.fna '
        'file. [default: %default]'),
        
    make_option('-x', '--truncate_ambi_bases',
        action='store_true', default=False,
        help='Enable to truncate at the first ambiguous character encountered '
        'in the sequences.  This will disable testing for ambiguous bases '
        '(-a option) [default: %default]'),
        
    make_option('--suppress_sampleid_check', default=False, action='store_true',
        help='Suppress SampleID check. This is needed if '
        'the input fasta file is not in a QIIME-standard demultiplexed '
        'format. With this option enabled, all forward primers and reverse '
        'primers (if this option used) in the mapping file will be tested '
        'against the sequences). *NOTE* Sequences that are not in the '
        'standard demultiplexed format for QIIME may fail in downstream '
        'steps. [default: %default]'),
        
    make_option('--enable_all_checks', default=False, action='store_true',
        help='Enables all quality tests for every sequence, rather than '
        'halting on the first failure, and generates a per-sequence report '
        'of all enabled quality filters for each sequence. '
        '[default: %default]')
    ]

script_info['version'] = __version__

def main():
    option_parser, opts, args = parse_command_line_parameters(**script_info)
    
    if opts.qual_score_window and not opts.qual_fnames:
        option_parser.error('To enable sliding window quality test (-w), '
        '.qual files must be included.')
        
    if opts.record_qual_scores and not opts.qual_fnames:
        option_parser.error('To enable recording of truncated quality '
         'scores, one must supply quality score files.')

    mapping_file = opts.map_fname
    fasta_files = set(opts.fasta_fnames)
    if opts.qual_fnames:
        qual_files = set(opts.qual_fnames)
    else:
        qual_files = set()
             
    create_dir(opts.output_dir)
    
    if opts.truncate_ambi_bases:
        opts.suppress_ambig_check = True
             
    quality_filter_sequences(mapping_file, fasta_files,
     qual_files, opts.min_seq_length, opts.max_seq_length,
     opts.min_qual_score, opts.retain_primer, opts.max_ambig,
     opts.suppress_ambig_check, opts.max_homopolymer,
     opts.suppress_homopolymer_check, opts.max_primer_mismatch, opts.output_dir,
     opts.qual_score_window, opts.discard_bad_windows,
     opts.suppress_primer_check, opts.reverse_primers,
     opts.reverse_primer_mismatches, opts.record_qual_scores,
     opts.truncate_ambi_bases, opts.suppress_sampleid_check,
     opts.enable_all_checks, opts.local_align_forward_primer)
 
if __name__ == "__main__":
    main()